# -*- coding: utf-8 -*-
"""ANPR_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VdIxgf3ty1EJan_BYuKgnywz3ZYRh2di

** **Automatic Number Plate Recognition (ANPR) Project**
**

Installing Libraries
"""

!pip install easyocr opencv-python

"""Indian Number Plates Dataset from Kaggle"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("dataclusterlabs/indian-number-plates-dataset")

print("Path to dataset files:", path)

"""Importing the Libraries"""

import os
import cv2
import csv
import easyocr
from glob import glob

# Load EasyOCR (set gpu=True if you're using GPU)
reader = easyocr.Reader(['en'], gpu=True)

# Dataset path (use actual returned path from kagglehub)
dataset_dir = kagglehub.dataset_download("dataclusterlabs/indian-number-plates-dataset")
print("Dataset downloaded to:", dataset_dir)

# Find all image files recursively
img_files = glob(os.path.join(dataset_dir, '**', '*.jpg'), recursive=True)
img_files += glob(os.path.join(dataset_dir, '**', '*.jpeg'), recursive=True)
img_files += glob(os.path.join(dataset_dir, '**', '*.png'), recursive=True)

print(f"Found {len(img_files)} images")

# Output folders
OUTPUT_IMG_DIR = 'blurred_output'
OUTPUT_CSV = 'output.csv'
os.makedirs(OUTPUT_IMG_DIR, exist_ok=True)

results = []

# Process each image
for img_path in img_files:
    file_name = os.path.basename(img_path)
    img = cv2.imread(img_path)
    if img is None:
        print(f" Could not read image: {file_name}")
        continue

    detections = reader.readtext(img)
    plate_text = ""

    for (bbox, text, conf) in detections:
        if len(text) >= 5 and conf > 0.3:  # Looser threshold for testing
            plate_text = text.upper()

            try:
                top_left = tuple(map(int, bbox[0]))
                bottom_right = tuple(map(int, bbox[2]))
                x1, y1 = max(top_left[0], 0), max(top_left[1], 0)
                x2, y2 = min(bottom_right[0], img.shape[1]), min(bottom_right[1], img.shape[0])

                roi = img[y1:y2, x1:x2]
                if roi.size > 0:
                    blurred_roi = cv2.GaussianBlur(roi, (51, 51), 0)
                    img[y1:y2, x1:x2] = blurred_roi
            except Exception as e:
                print(f" Error processing {file_name}: {e}")
            break

    # Save blurred image
    output_path = os.path.join(OUTPUT_IMG_DIR, file_name)
    cv2.imwrite(output_path, img)

    # Save text result
    results.append([file_name, plate_text])
    print(f" Processed: {file_name} â†’ Plate: {plate_text}")

# Save results to CSV
with open(OUTPUT_CSV, 'w', newline='') as f:
    writer = csv.writer(f)
    writer.writerow(['Image Filename', 'Recognized Plate'])
    writer.writerows(results)

print("\n All done!")
print(f" Blurred images: {OUTPUT_IMG_DIR}/")
print(f" CSV saved to: {OUTPUT_CSV}")

"""Reading the CSV file"""

import pandas as pd
pd.read_csv(OUTPUT_CSV).head()

"""Downloading the output file"""

from google.colab import files
files.download('output.csv')